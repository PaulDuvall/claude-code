#!/usr/bin/env node

/**
 * Claude Commands CLI
 * Main entry point for the claude-dev-toolkit
 */

const path = require('path');
const fs = require('fs');
const os = require('os');
const { program } = require('commander');
const { version, description } = require('../package.json');

program
    .name('claude-commands')
    .description(description)
    .version(version);

program
    .command('list')
    .description('List all available commands')
    .option('-a, --active', 'Show only active commands')
    .option('-e, --experiments', 'Show only experimental commands')
    .action((options) => {
        const claudeDir = path.join(os.homedir(), '.claude', 'commands');
        
        console.log('📦 Claude Custom Commands\n');
        
        if (fs.existsSync(claudeDir)) {
            const allCommands = fs.readdirSync(claudeDir)
                .filter(f => f.endsWith('.md'))
                .map(f => f.replace('.md', ''))
                .sort();
            
            if (allCommands.length > 0) {
                console.log('🚀 Available Commands:');
                allCommands.forEach(cmd => console.log(`  /${cmd}`));
                console.log(`\n📊 Total: ${allCommands.length} commands`);
            } else {
                console.log('  No commands found');
            }
        } else {
            console.log('  Commands directory not found');
        }
        
        console.log('\n💡 Usage: Try /xhelp in Claude Code to see all commands');
    });

program
    .command('install')
    .description('Install command sets')
    .option('--active', 'Install active commands only')
    .option('--experiments', 'Install experimental commands')
    .option('--all', 'Install all commands')
    .action((options) => {
        const installer = require('../lib/installer');
        installer.install(options);
    });

program
    .command('status')
    .description('Show installation status')
    .action(() => {
        const claudeDir = path.join(os.homedir(), '.claude', 'commands');
        
        console.log('📊 Claude Dev Toolkit Status\n');
        
        // Check Claude directory
        console.log('📁 Installation Path:');
        console.log(`   Commands directory: ${fs.existsSync(claudeDir) ? '✅' : '❌'} ${claudeDir}\n`);
        
        // Count commands
        let totalCount = 0;
        
        if (fs.existsSync(claudeDir)) {
            totalCount = fs.readdirSync(claudeDir).filter(f => f.endsWith('.md')).length;
        }
        
        console.log('📦 Command Inventory:');
        console.log(`   Total commands: ${totalCount}\n`);
        
        // Package info
        console.log('📋 Package Information:');
        console.log(`   Version: ${version}`);
        console.log(`   CLI Location: ${process.argv[1]}\n`);
        
        // Quick health check
        const isHealthy = fs.existsSync(claudeDir) && totalCount > 0;
        console.log(`🔍 Overall Status: ${isHealthy ? '✅ Healthy' : '⚠️  Issues detected'}`);
        
        if (!isHealthy) {
            console.log('\n💡 Troubleshooting:');
            console.log('   • Try: npm install -g @paulduvall/claude-dev-toolkit');
            console.log('   • Or reinstall: claude-commands install --all');
        }
    });

program
    .command('subagents')
    .description('Manage AI subagents for Claude Code')
    .option('-l, --list', 'List available subagents')
    .option('-i, --install', 'Install subagents to Claude Code')
    .action((options) => {
        const subagents = require('../lib/subagents');
        subagents.handleCommand(options);
    });

program
    .command('config')
    .description('Manage Claude Code configuration templates')
    .option('-l, --list', 'List available configuration templates')
    .option('-t, --template <name>', 'Apply configuration template')
    .action((options) => {
        const config = require('../lib/config');
        config.handleCommand(options);
    });

program
    .command('setup')
    .description('Setup the Claude Dev Toolkit with custom commands and configuration')
    .option('--type <template>', 'Configuration template to apply (basic, comprehensive, security-focused)')
    .option('--commands <set>', 'Command set to install (active, experiments, all, none)')
    .option('--skip-configure', 'Skip configuration step')
    .option('--skip-hooks', 'Skip hooks installation')
    .option('--force', 'Overwrite existing installation')
    .option('--dry-run', 'Preview actions without executing')
    .action(async (options) => {
        const SetupCommand = require('../lib/setup-command');
        const setupCmd = new SetupCommand();
        try {
            const result = await setupCmd.execute(options);
            if (!result.success && !result.dryRun) {
                process.exit(1);
            }
        } catch (error) {
            console.error(`Setup failed: ${error.message}`);
            process.exit(1);
        }
    });

program
    .command('verify')
    .description('Verify the Claude Dev Toolkit installation status and health')
    .option('--verbose', 'Show detailed verification information')
    .option('--fix', 'Attempt to fix detected issues automatically')
    .action(async (options) => {
        const VerifyCommand = require('../lib/verify-command');
        const verifyCmd = new VerifyCommand();
        try {
            const result = await verifyCmd.execute(options);
            // Set exit code based on health status
            if (result.overall === 'critical') {
                process.exit(2);
            } else if (result.overall === 'warning') {
                process.exit(1);
            }
            // Exit 0 for healthy
        } catch (error) {
            console.error(`Verification failed: ${error.message}`);
            process.exit(2);
        }
    });

program.parse(process.argv);
